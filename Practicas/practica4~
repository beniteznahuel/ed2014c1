Estructuras abstractas

Set

empty :: a
belongs :: S -> Int -> Bool
add :: S -> Int -> S
remove :: S -> Int -> S
size :: S -> Int

La implementación de la interfaz depende del contexto, osea, podría necesitar el add rapido o el remove rapido.

-- VERSION QUE NO ADMITE REPETIDOS

data SetListNoReps = SLNR [Int]

instance Set SetListNoReps where
  empty = SLNR []
  belongs (SLNR xs) n = elem n xs
  add (SLNR xs) n | elem n xs = SLNR xs
		  | otherwise = SLNR (n:xs)
  remove (SLNR xs) n = SLNR (remove' xs n)
  size (SLNR xs) = length xs
  
remove' :: [Int] -> Int -> [Int]
remove' [] _ = []
remove' (x:xs) n | x == n = xs
                 | otherwise = x:(remove' xs n)