Estructuras abstractas

Set

empty :: a
belongs :: S -> Int -> Bool
add :: S -> Int -> S
remove :: S -> Int -> S
size :: S -> Int

La implementaciÃ³n de la interfaz depende del contexto, osea, podrÃ­a necesitar el add rapido o el remove rapido.

-- VERSION QUE NO ADMITE REPETIDOS

data SetListNoReps = SLNR [Int]

instance Set SetListNoReps where

  empty :: S
  empty = SLNR []
  
  belongs :: S -> a -> Bool
  belongs (SLNR xs) n = elem n xs
  
  add :: S -> a -> S
  add (SLNR xs) n | elem n xs = SLNR xs
		  | otherwise = SLNR (n:xs)
		  
  remove :: S -> a -> S
  remove (SLNR xs) n = SLNR (remove' xs n)
  
  size :: S -> Int
  size (SLNR xs) = length xs
  
remove' :: [Int] -> Int -> [Int]
remove' [] _ = []
remove' (x:xs) n | x == n = xs
                 | otherwise = x:(remove' xs n)
                 
-- VERSION QUE ADMITE REPETIDOS

data SetListWithReps = SLWR [Int]

instance Set SetListWithReps where
  empty = SLWR []
  belongs (SLWR xs) n = elem n xs
  add (SLWR xs) n = SLWR (n:xs)
  remove (SLWR xs) n = SLWR (remove'' xs n)
  size (SLWR xs) = size' xs
  
size' [] = 0
size' (x:xs) | elem x xs = size' xs
             | otherwise = 1 + size' xs
             
remove'' :: [] n = []
remove'' (x:xs) n | x==n = remove'' xs n
		  | otherwise = x:(remove'' xs n)
		  
belonging :: Set s => [Int] -> S -> [Int]
belonging [] s = []
belonging (x:xs) | belong s x = x:(belonging xs s)
                 | otherwise = belonging xs s
                 
-- TAREA, implementar la misma interfaz para la siguiente estructura abstracta

data SetListSortedSize = SLSS [Int] Int --Ordenada de menor a mayor, el último Int es el size.

instance Set SetListSortedSize where 
  
  empty :: 
  empty = SLSS [] 0
  belongs (SLSS xs _) e = elem e xs
  add (SLSS xs c) e | elem e xs = (SLSS xs c)
                    | otherwise = SLSS (addInPositiion xs e) (c+1)
  remove (SLSS xs c) e | elem e xs = (SLSS xs c)
                       | otherwise = SLSS (deleteElem xs e) (c-1)
  size (SLSS _ c) _ = c
  
  addInPositiion :: [Int] -> Int -> [Int]
  addInPositiion EmptyT e = [e]
  addInPositiion (x:xs) e | e > x = [x] ++ (addInPositiion xs e)
                          | otherwise = e:x:xs
                          
  deleteElem :: [Int] -> Int -> [Int]
  deleteElem [] _ = []
  deleteElem (x:xs) e | x == e = xs
                      | otherwise = x:(deleteElem xs e)
                      
                      