data Sexo = Masculino | Femenino deriving (Show)

data Persona = MkPersona Int String Sexo deriving (Show) -- ( CONSTRUCTOR DE PERSONA )

-- MkPersona :: Int -> String -> Persona 

cumplirAños :: Persona -> Persona
cumplirAños (MkPersona e n s) = MkPersona (e+1) n s

cambiarNombre :: Persona -> String -> Persona
cambiarNombre ( MkPersona e _ s) n = MkPersona e n s

esEgresado :: Persona -> Bool
esEgresado (MkPersona e _ _) = e > 18

data Color = Rojo | Azul | Verde | Negro deriving (Show)
data Dir = Norte | Sur | Este | Oeste deriving (Show)
data Celda = MkCelda {
  azules :: Int,
  rojas :: Int,
  verdes :: Int,
  negras :: Int
} deriving (Show)
type Fila = [Celda]

filaDe3 :: Fila
filaDe3 = [(MkCelda 0 0 0 0), (MkCelda 0 0 0 0), (MkCelda 0 0 0 0)]

filaVacia :: Int -> Fila
filaVacia 0 = []
filaVacia n = (MkCelda 0 0 0 0) : (filaVacia (n-1))

ponerRoja :: Celda -> Celda
ponerRoja  (MkCelda a r v n) = MkCelda a (r+1) v n

ponerRojaEnCadaUna :: Fila -> Fila
ponerRojaEnCadaUna [] = []
ponerRojaEnCadaUna (x:xs) = ponerRoja x : ponerRojaEnCadaUna xs

